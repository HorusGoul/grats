-----------------
INPUT
----------------- 
/** @gqlType */
class SomeType {
  /** @gqlField */
  async me(): Promise<User> {
    return new User();
  }
}

/** @gqlType */
class User {
  /** @gqlField */
  name(): string {
    return "Alice";
  }
  /** @gqlField */
  friends(): User[] {
    return [new User()];
  }
}

-----------------
OUTPUT
-----------------
-- SDL --
directive @asyncIterable on FIELD_DEFINITION

directive @propertyName(name: String!) on FIELD_DEFINITION

directive @exported(tsModulePath: String!, functionName: String!, argCount: Int!) on FIELD_DEFINITION

type SomeType {
  me: User
}

type User {
  name: String
  friends: [User!]
}
-- TypeScript --
import { GraphQLSchema, GraphQLObjectType, GraphQLString, GraphQLList, GraphQLNonNull } from "graphql";
const UserType: GraphQLObjectType = new GraphQLObjectType({
    name: "User",
    fields() {
        return {
            name: {
                name: "name",
                type: GraphQLString
            },
            friends: {
                name: "friends",
                type: new GraphQLList(new GraphQLNonNull(UserType))
            }
        };
    }
});
const SomeTypeType: GraphQLObjectType = new GraphQLObjectType({
    name: "SomeType",
    fields() {
        return {
            me: {
                name: "me",
                type: UserType
            }
        };
    }
});
const schema = new GraphQLSchema({
    types: [SomeTypeType, UserType]
});
export { schema };
