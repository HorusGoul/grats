-----------------
INPUT
----------------- 
import { Float, Int } from "../../../Types";

/** @gqlType */
export default class SomeType {
  /** @gqlField */
  intField({ count = 10 }: { count: Int }): string {
    return `${count} world!`;
  }
  /** @gqlField */
  floatField({ scale = 10.0 }: { scale: Float }): string {
    return `${scale} world!`;
  }
}

-----------------
OUTPUT
-----------------
-- SDL --
directive @asyncIterable on FIELD_DEFINITION

directive @propertyName(name: String!) on FIELD_DEFINITION

directive @exported(tsModulePath: String!, functionName: String!, argCount: Int!) on FIELD_DEFINITION

type SomeType {
  intField(count: Int! = 10): String
  floatField(scale: Float! = 10): String
}
-- TypeScript --
import { GraphQLSchema, GraphQLObjectType, GraphQLString, GraphQLNonNull, GraphQLInt, GraphQLFloat } from "graphql";
function getSchema(): GraphQLSchema {
    const SomeTypeType: GraphQLObjectType = new GraphQLObjectType({
        name: "SomeType",
        fields() {
            return {
                intField: {
                    name: "intField",
                    type: GraphQLString,
                    args: {
                        count: {
                            name: "count",
                            type: new GraphQLNonNull(GraphQLInt),
                            defaultValue: 10
                        }
                    }
                },
                floatField: {
                    name: "floatField",
                    type: GraphQLString,
                    args: {
                        scale: {
                            name: "scale",
                            type: new GraphQLNonNull(GraphQLFloat),
                            defaultValue: 10
                        }
                    }
                }
            };
        }
    });
    return new GraphQLSchema({
        types: [SomeTypeType]
    });
}
export { getSchema };
