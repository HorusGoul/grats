-----------------
INPUT
----------------- 
import { Int } from "../../../Types";

/** @gqlType */
export default class SomeType {
  /** @gqlField */
  someField1({
    input = { first: 10, offset: 100 },
  }: {
    input?: ConnectionInput | null;
  }): string {
    return "hello";
  }
}

/** @gqlInput */
type ConnectionInput = {
  first: Int;
  offset: Int;
};

-----------------
OUTPUT
-----------------
-- SDL --
directive @asyncIterable on FIELD_DEFINITION

directive @propertyName(name: String!) on FIELD_DEFINITION

directive @exported(tsModulePath: String!, functionName: String!, argCount: Int!) on FIELD_DEFINITION

type SomeType {
  someField1(input: ConnectionInput = {first: 10, offset: 100}): String
}

input ConnectionInput {
  first: Int!
  offset: Int!
}
-- TypeScript --
import { GraphQLSchema, GraphQLObjectType, GraphQLString, GraphQLInputObjectType, GraphQLNonNull, GraphQLInt } from "graphql";
const ConnectionInputType: GraphQLInputObjectType = new GraphQLInputObjectType({
    name: "ConnectionInput",
    fields() {
        return {
            first: {
                name: "first",
                type: new GraphQLNonNull(GraphQLInt)
            },
            offset: {
                name: "offset",
                type: new GraphQLNonNull(GraphQLInt)
            }
        };
    }
});
const SomeTypeType: GraphQLObjectType = new GraphQLObjectType({
    name: "SomeType",
    fields() {
        return {
            someField1: {
                name: "someField1",
                type: GraphQLString,
                args: {
                    input: {
                        name: "input",
                        type: ConnectionInputType,
                        defaultValue: {
                            first: 10,
                            offset: 100
                        }
                    }
                }
            }
        };
    }
});
const schema = new GraphQLSchema({
    types: [SomeTypeType, ConnectionInputType]
});
export { schema };
