-----------------
INPUT
----------------- 
/** @gqlType */
class SomeType {
  /** @gqlField */
  foo: string;
}

/** @gqlInterface */
interface IFoo {
  /** @gqlField */
  bar: string;
}

/** @gqlField */
export function greeting(iFoo: IFoo): string {
  return "Hello world!";
}

-----------------
OUTPUT
-----------------
-- SDL --
directive @asyncIterable on FIELD_DEFINITION

directive @propertyName(name: String!) on FIELD_DEFINITION

directive @exported(tsModulePath: String!, functionName: String!, argCount: Int!) on FIELD_DEFINITION

type SomeType {
  foo: String
}

interface IFoo {
  bar: String
  greeting: String
}
-- TypeScript --
import { GraphQLSchema, GraphQLObjectType, GraphQLString, GraphQLInterfaceType } from "graphql";
const SomeTypeType: GraphQLObjectType = new GraphQLObjectType({
    name: "SomeType",
    fields() {
        return {
            foo: {
                name: "foo",
                type: GraphQLString
            }
        };
    }
});
const IFooType: GraphQLInterfaceType = new GraphQLInterfaceType({
    name: "IFoo",
    fields() {
        return {
            bar: {
                name: "bar",
                type: GraphQLString
            },
            greeting: {
                name: "greeting",
                type: GraphQLString
            }
        };
    }
});
const schema = new GraphQLSchema({
    types: [SomeTypeType, IFooType]
});
export { schema };
