-----------------
INPUT
----------------- 
/** @gqlType */
class SomeType {
  // No fields
}

/** @gqlField hello */
export function greeting(_: SomeType): string {
  return "Hello world!";
}

-----------------
OUTPUT
-----------------
-- SDL --
directive @asyncIterable on FIELD_DEFINITION

directive @propertyName(name: String!) on FIELD_DEFINITION

directive @exported(tsModulePath: String!, functionName: String!, argCount: Int!) on FIELD_DEFINITION

directive @exportedScalar(tsModulePath: String!, exportName: String!) on SCALAR

type SomeType {
  hello: String @exported(tsModulePath: "grats/src/tests/fixtures/extend_type/addRenamedFieldToSomeType.ts", functionName: "greeting", argCount: 1)
}
-- TypeScript --
import { greeting as someTypeGreetingResolver } from "./addRenamedFieldToSomeType";
import { GraphQLSchema, GraphQLObjectType, GraphQLString } from "graphql";
function getSchema(): GraphQLSchema {
    const SomeTypeType: GraphQLObjectType = new GraphQLObjectType({
        name: "SomeType",
        fields() {
            return {
                hello: {
                    name: "hello",
                    type: GraphQLString,
                    resolve(source) {
                        return someTypeGreetingResolver(source);
                    }
                }
            };
        }
    });
    return new GraphQLSchema({
        types: [SomeTypeType]
    });
}
export { getSchema };
