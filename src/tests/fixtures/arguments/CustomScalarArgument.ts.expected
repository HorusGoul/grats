-----------------
INPUT
----------------- 
/** @gqlScalar */
export type MyString = string;

/** @gqlType */
export default class SomeType {
  /** @gqlField */
  hello({ greeting }: { greeting: MyString }): string {
    return "Hello world!";
  }
}

-----------------
OUTPUT
-----------------
-- SDL --
directive @asyncIterable on FIELD_DEFINITION

directive @propertyName(name: String!) on FIELD_DEFINITION

directive @exported(tsModulePath: String!, functionName: String!, argCount: Int!) on FIELD_DEFINITION

directive @exportedScalar(tsModulePath: String!, exportName: String!) on SCALAR

scalar MyString @exportedScalar(tsModulePath: "grats/src/tests/fixtures/arguments/CustomScalarArgument.ts", exportName: "MyString")

type SomeType {
  hello(greeting: MyString!): String
}
-- TypeScript --
import { MyString as MyStringScalarType } from "./CustomScalarArgument";
import { GraphQLScalarSerializer, GraphQLScalarValueParser, GraphQLScalarLiteralParser, GraphQLSchema, GraphQLScalarType, GraphQLObjectType, GraphQLString, GraphQLNonNull } from "graphql";
type SchemaConfig = {
    scalars: {
        MyString: {
            serialize: GraphQLScalarSerializer<MyStringScalarType>;
            parseValue: GraphQLScalarValueParser<MyStringScalarType>;
            parseLiteral: GraphQLScalarLiteralParser<MyStringScalarType>;
        };
    };
};
function getSchema(config: SchemaConfig): GraphQLSchema {
    const MyStringType: GraphQLScalarType = new GraphQLScalarType({
        serialize: config.scalars.MyString.serialize,
        parseValue: config.scalars.MyString.parseValue,
        parseLiteral: config.scalars.MyString.parseLiteral,
        name: "MyString"
    });
    const SomeTypeType: GraphQLObjectType = new GraphQLObjectType({
        name: "SomeType",
        fields() {
            return {
                hello: {
                    name: "hello",
                    type: GraphQLString,
                    args: {
                        greeting: {
                            name: "greeting",
                            type: new GraphQLNonNull(MyStringType)
                        }
                    }
                }
            };
        }
    });
    return new GraphQLSchema({
        types: [MyStringType, SomeTypeType]
    });
}
export { getSchema };
