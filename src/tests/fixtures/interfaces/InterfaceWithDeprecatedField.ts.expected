-----------------
INPUT
----------------- 
/** @gqlType */
export default class SomeType {
  /** @gqlField */
  me(): User {
    return new User();
  }
}

/** @gqlInterface */
interface IPerson {
  /** @gqlField
   * @deprecated Not used anymore
   */
  name?: string;
}

/** @gqlType */
class User implements IPerson {
  __typename = "User";
  /** @gqlField */
  name?: string;
}

-----------------
OUTPUT
-----------------
-- SDL --
directive @asyncIterable on FIELD_DEFINITION

directive @propertyName(name: String!) on FIELD_DEFINITION

directive @exported(tsModulePath: String!, functionName: String!, argCount: Int!) on FIELD_DEFINITION

type SomeType {
  me: User
}

interface IPerson {
  name: String @deprecated(reason: "Not used anymore")
}

type User implements IPerson {
  name: String
}
-- TypeScript --
import { GraphQLSchema, GraphQLObjectType, GraphQLString, GraphQLInterfaceType } from "graphql";
const IPersonType: GraphQLInterfaceType = new GraphQLInterfaceType({
    name: "IPerson",
    fields() {
        return {
            name: {
                deprecationReason: "Not used anymore",
                name: "name",
                type: GraphQLString
            }
        };
    }
});
const UserType: GraphQLObjectType = new GraphQLObjectType({
    name: "User",
    fields() {
        return {
            name: {
                name: "name",
                type: GraphQLString
            }
        };
    },
    interfaces() {
        return [IPersonType];
    }
});
const SomeTypeType: GraphQLObjectType = new GraphQLObjectType({
    name: "SomeType",
    fields() {
        return {
            me: {
                name: "me",
                type: UserType
            }
        };
    }
});
const schema = new GraphQLSchema({
    types: [SomeTypeType, IPersonType, UserType]
});
export { schema };
