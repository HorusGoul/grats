-----------------
INPUT
----------------- 
import { ID } from "../../../types";

/** @gqlType */
export default class SomeType {
  /** @gqlField */
  me(): Node {
    throw new Error("Not implemented");
  }
}

class Node {
  id: ID;
}

/** @gqlInterface */
interface Node {
  /** @gqlField */
  id: string;
}

-----------------
OUTPUT
-----------------
-- SDL --
directive @asyncIterable on FIELD_DEFINITION

directive @propertyName(name: String!) on FIELD_DEFINITION

directive @exported(tsModulePath: String!, functionName: String!, argCount: Int!) on FIELD_DEFINITION

type SomeType {
  me: Node
}

interface Node {
  id: String
}
-- TypeScript --
import { GraphQLSchema, GraphQLObjectType, GraphQLInterfaceType, GraphQLString } from "graphql";
const NodeType: GraphQLInterfaceType = new GraphQLInterfaceType({
    name: "Node",
    fields() {
        return {
            id: {
                name: "id",
                type: GraphQLString
            }
        };
    }
});
const SomeTypeType: GraphQLObjectType = new GraphQLObjectType({
    name: "SomeType",
    fields() {
        return {
            me: {
                name: "me",
                type: NodeType
            }
        };
    }
});
const schema = new GraphQLSchema({
    types: [SomeTypeType, NodeType]
});
export { schema };
