-----------------
INPUT
----------------- 
/** @gqlType */
export default class SomeType {
  /** @gqlField */
  me(): User {
    return new User();
  }
}

/** @gqlInterface */
interface Person<T> {
  /** @gqlField */
  name: string;

  other: T;
}

/** @gqlType */
class User implements Person<string> {
  __typename = "User";
  /** @gqlField */
  name: string;

  other: string;
}

-----------------
OUTPUT
-----------------
-- SDL --
directive @asyncIterable on FIELD_DEFINITION

directive @propertyName(name: String!) on FIELD_DEFINITION

directive @exported(tsModulePath: String!, functionName: String!, argCount: Int!) on FIELD_DEFINITION

type SomeType {
  me: User
}

interface Person {
  name: String
}

type User implements Person {
  name: String
}
-- TypeScript --
import { GraphQLSchema, GraphQLObjectType, GraphQLString, GraphQLInterfaceType } from "graphql";
const PersonType: GraphQLInterfaceType = new GraphQLInterfaceType({
    name: "Person",
    fields() {
        return {
            name: {
                name: "name",
                type: GraphQLString
            }
        };
    }
});
const UserType: GraphQLObjectType = new GraphQLObjectType({
    name: "User",
    fields() {
        return {
            name: {
                name: "name",
                type: GraphQLString
            }
        };
    },
    interfaces() {
        return [PersonType];
    }
});
const SomeTypeType: GraphQLObjectType = new GraphQLObjectType({
    name: "SomeType",
    fields() {
        return {
            me: {
                name: "me",
                type: UserType
            }
        };
    }
});
const schema = new GraphQLSchema({
    types: [SomeTypeType, PersonType, UserType]
});
export { schema };
