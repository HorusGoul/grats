-----------------
INPUT
----------------- 
/** @gqlType */
export default class SomeType {
  /** @gqlField */
  me: Actor;
}

/** @gqlType */
class User {
  __typename = "User";
  /** @gqlField */
  name: string;
}

/** @gqlType */
class Entity {
  __typename = "Entity";
  /** @gqlField */
  description: string;
}

/** @gqlUnion */
type Actor = User | Entity;

-----------------
OUTPUT
-----------------
-- SDL --
directive @asyncIterable on FIELD_DEFINITION

directive @propertyName(name: String!) on FIELD_DEFINITION

directive @exported(tsModulePath: String!, functionName: String!, argCount: Int!) on FIELD_DEFINITION

type SomeType {
  me: Actor
}

type User {
  name: String
}

type Entity {
  description: String
}

union Actor = User | Entity
-- TypeScript --
import { GraphQLSchema, GraphQLObjectType, GraphQLUnionType, GraphQLString } from "graphql";
function getSchema(): GraphQLSchema {
    const UserType: GraphQLObjectType = new GraphQLObjectType({
        name: "User",
        fields() {
            return {
                name: {
                    name: "name",
                    type: GraphQLString
                }
            };
        }
    });
    const EntityType: GraphQLObjectType = new GraphQLObjectType({
        name: "Entity",
        fields() {
            return {
                description: {
                    name: "description",
                    type: GraphQLString
                }
            };
        }
    });
    const ActorType: GraphQLUnionType = new GraphQLUnionType({
        name: "Actor",
        types() {
            return [UserType, EntityType];
        }
    });
    const SomeTypeType: GraphQLObjectType = new GraphQLObjectType({
        name: "SomeType",
        fields() {
            return {
                me: {
                    name: "me",
                    type: ActorType
                }
            };
        }
    });
    return new GraphQLSchema({
        types: [SomeTypeType, UserType, EntityType, ActorType]
    });
}
export { getSchema };
