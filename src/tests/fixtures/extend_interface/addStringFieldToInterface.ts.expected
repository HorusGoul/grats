-----------------
INPUT
----------------- 
/** @gqlInterface */
interface IPerson {
  name: string;
  /** @gqlField */
  hello: string;
}

/** @gqlField */
export function greeting(person: IPerson): string {
  return `Hello ${person.name}!`;
}

/** @gqlType */
class User implements IPerson {
  __typename: "User";
  name: string;
  /** @gqlField */
  hello: string;
}

/** @gqlType */
class Admin implements IPerson {
  __typename: "Admin";
  name: string;
  /** @gqlField */
  hello: string;
}

-----------------
OUTPUT
-----------------
directive @methodName(name: String!) on FIELD_DEFINITION

directive @exported(filename: String!, functionName: String!) on FIELD_DEFINITION

interface IPerson {
  hello: String
  greeting: String
}

type User implements IPerson {
  hello: String
  greeting: String @exported(filename: "tests/fixtures/extend_interface/addStringFieldToInterface.js", functionName: "greeting")
}

type Admin implements IPerson {
  hello: String
  greeting: String @exported(filename: "tests/fixtures/extend_interface/addStringFieldToInterface.js", functionName: "greeting")
}