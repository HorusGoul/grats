-----------------
INPUT
----------------- 
/** @gqlInterface */
interface IPerson {
  name: string;
  /** @gqlField */
  hello: string;
}

/** @gqlField */
export function greeting(person: IPerson): string {
  return `Hello ${person.name}!`;
}

/** @gqlType */
class User implements IPerson {
  __typename: "User";
  name: string;
  /** @gqlField */
  hello: string;
}

/** @gqlType */
class Admin implements IPerson {
  __typename: "Admin";
  name: string;
  /** @gqlField */
  hello: string;
}

-----------------
OUTPUT
-----------------
-- SDL --
directive @asyncIterable on FIELD_DEFINITION

directive @propertyName(name: String!) on FIELD_DEFINITION

directive @exported(tsModulePath: String!, functionName: String!, argCount: Int!) on FIELD_DEFINITION

interface IPerson {
  hello: String
  greeting: String
}

type User implements IPerson {
  hello: String
  greeting: String @exported(tsModulePath: "grats/src/tests/fixtures/extend_interface/addStringFieldToInterface.ts", functionName: "greeting", argCount: 1)
}

type Admin implements IPerson {
  hello: String
  greeting: String @exported(tsModulePath: "grats/src/tests/fixtures/extend_interface/addStringFieldToInterface.ts", functionName: "greeting", argCount: 1)
}
-- TypeScript --
import { greeting as userGreetingResolver } from "./addStringFieldToInterface";
import { greeting as adminGreetingResolver } from "./addStringFieldToInterface";
import { GraphQLSchema, GraphQLInterfaceType, GraphQLString, GraphQLObjectType } from "graphql";
const IPersonType: GraphQLInterfaceType = new GraphQLInterfaceType({
    name: "IPerson",
    fields() {
        return {
            hello: {
                name: "hello",
                type: GraphQLString
            },
            greeting: {
                name: "greeting",
                type: GraphQLString
            }
        };
    }
});
const UserType: GraphQLObjectType = new GraphQLObjectType({
    name: "User",
    fields() {
        return {
            hello: {
                name: "hello",
                type: GraphQLString
            },
            greeting: {
                name: "greeting",
                type: GraphQLString,
                resolve(source) {
                    return userGreetingResolver(source);
                }
            }
        };
    },
    interfaces() {
        return [IPersonType];
    }
});
const AdminType: GraphQLObjectType = new GraphQLObjectType({
    name: "Admin",
    fields() {
        return {
            hello: {
                name: "hello",
                type: GraphQLString
            },
            greeting: {
                name: "greeting",
                type: GraphQLString,
                resolve(source) {
                    return adminGreetingResolver(source);
                }
            }
        };
    },
    interfaces() {
        return [IPersonType];
    }
});
const schema = new GraphQLSchema({
    types: [IPersonType, UserType, AdminType]
});
export { schema };
