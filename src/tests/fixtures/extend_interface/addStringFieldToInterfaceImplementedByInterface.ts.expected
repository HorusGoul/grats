-----------------
INPUT
----------------- 
/** @gqlField */
export function greeting(thing: IThing): string {
  return `Hello ${thing.name}!`;
}

/** @gqlInterface */
interface IThing {
  name: string;
  // Should have greeting added
}

/**
 * @gqlInterface
 */
interface IPerson extends IThing {
  name: string;
  // Should have greeting added
}

/** @gqlType */
class User implements IPerson, IThing {
  __typename: "User";
  name: string;
  // Should have greeting added
}

/** @gqlType */
class Admin implements IPerson, IThing {
  __typename: "Admin";
  name: string;
  // Should have greeting added
}

-----------------
OUTPUT
-----------------
directive @methodName(name: String!) on FIELD_DEFINITION

directive @exported(filename: String!, functionName: String!) on FIELD_DEFINITION

interface IThing {
  greeting: String
}

interface IPerson implements IThing {
  greeting: String
}

type User implements IPerson & IThing {
  greeting: String @exported(filename: "tests/fixtures/extend_interface/addStringFieldToInterfaceImplementedByInterface.js", functionName: "greeting")
}

type Admin implements IPerson & IThing {
  greeting: String @exported(filename: "tests/fixtures/extend_interface/addStringFieldToInterfaceImplementedByInterface.js", functionName: "greeting")
}