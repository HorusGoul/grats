-----------------
INPUT
----------------- 
/** @gqlType */
type Query = unknown;

/** @gqlField */
export function foo(_: Query): string {
  return "foo";
}

-----------------
OUTPUT
-----------------
-- SDL --
schema {
  query: Query
}

directive @asyncIterable on FIELD_DEFINITION

directive @propertyName(name: String!) on FIELD_DEFINITION

directive @exported(tsModulePath: String!, functionName: String!, argCount: Int!) on FIELD_DEFINITION

type Query {
  foo: String @exported(tsModulePath: "grats/src/tests/fixtures/type_definitions_from_alias/QueryAsAliasOfUnknown.ts", functionName: "foo", argCount: 1)
}
-- TypeScript --
import { foo as queryFooResolver } from "./QueryAsAliasOfUnknown";
import { GraphQLSchema, GraphQLObjectType, GraphQLString } from "graphql";
const QueryType: GraphQLObjectType = new GraphQLObjectType({
    name: "Query",
    fields() {
        return {
            foo: {
                name: "foo",
                type: GraphQLString,
                resolve(source) {
                    return queryFooResolver(source);
                }
            }
        };
    }
});
const schema = new GraphQLSchema({
    query: QueryType,
    types: [QueryType]
});
export { schema };
