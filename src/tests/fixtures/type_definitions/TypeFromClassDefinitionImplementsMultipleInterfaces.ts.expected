-----------------
INPUT
----------------- 
/** @gqlInterface Node */
interface GqlNode {
  /** @gqlField */
  id: string;
}

/** @gqlInterface */
interface Person {
  /** @gqlField */
  hello: string;
}

/** @gqlType */
export default class User implements Person, GqlNode {
  readonly __typename = "User";
  /** @gqlField */
  hello: string;

  /** @gqlField */
  id: string;
}

-----------------
OUTPUT
-----------------
-- SDL --
directive @asyncIterable on FIELD_DEFINITION

directive @propertyName(name: String!) on FIELD_DEFINITION

directive @exported(tsModulePath: String!, functionName: String!, argCount: Int!) on FIELD_DEFINITION

interface Node {
  id: String
}

interface Person {
  hello: String
}

type User implements Person & Node {
  hello: String
  id: String
}
-- TypeScript --
import { GraphQLSchema, GraphQLInterfaceType, GraphQLString, GraphQLObjectType } from "graphql";
const NodeType: GraphQLInterfaceType = new GraphQLInterfaceType({
    name: "Node",
    fields() {
        return {
            id: {
                name: "id",
                type: GraphQLString
            }
        };
    }
});
const PersonType: GraphQLInterfaceType = new GraphQLInterfaceType({
    name: "Person",
    fields() {
        return {
            hello: {
                name: "hello",
                type: GraphQLString
            }
        };
    }
});
const UserType: GraphQLObjectType = new GraphQLObjectType({
    name: "User",
    fields() {
        return {
            hello: {
                name: "hello",
                type: GraphQLString
            },
            id: {
                name: "id",
                type: GraphQLString
            }
        };
    },
    interfaces() {
        return [PersonType, NodeType];
    }
});
const schema = new GraphQLSchema({
    types: [NodeType, PersonType, UserType]
});
export { schema };
