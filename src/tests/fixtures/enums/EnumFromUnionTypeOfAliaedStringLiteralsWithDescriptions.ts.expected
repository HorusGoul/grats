-----------------
INPUT
----------------- 
/** @gqlType */
export class SomeType {
  /** @gqlField */
  hello: MyEnum;
}

/** The "valid" case */
type Valid = "VALID";
/** The "invalid" case */
type Invalid = "INVALID";

/** @gqlEnum */
type MyEnum = Valid | Invalid;

-----------------
OUTPUT
-----------------
-- SDL --
directive @asyncIterable on FIELD_DEFINITION

directive @propertyName(name: String!) on FIELD_DEFINITION

directive @exported(tsModulePath: String!, functionName: String!, argCount: Int!) on FIELD_DEFINITION

type SomeType {
  hello: MyEnum
}

enum MyEnum {
  """The "valid" case"""
  VALID
  """The "invalid" case"""
  INVALID
}
-- TypeScript --
import { GraphQLSchema, GraphQLObjectType, GraphQLEnumType } from "graphql";
const MyEnumType: GraphQLEnumType = new GraphQLEnumType({
    name: "MyEnum",
    values: {
        VALID: {
            description: "The \"valid\" case",
            value: "VALID"
        },
        INVALID: {
            description: "The \"invalid\" case",
            value: "INVALID"
        }
    }
});
const SomeTypeType: GraphQLObjectType = new GraphQLObjectType({
    name: "SomeType",
    fields() {
        return {
            hello: {
                name: "hello",
                type: MyEnumType
            }
        };
    }
});
const schema = new GraphQLSchema({
    types: [SomeTypeType, MyEnumType]
});
export { schema };
