-----------------
INPUT
----------------- 
/** @gqlType */
export default interface User extends HasName {
  __typename: "User";
  /** @gqlField */
  hello: string;

  /** @gqlField */
  name: string;
}

/** @gqlInterface */
interface HasName {
  /** @gqlField */
  name: string;
}

-----------------
OUTPUT
-----------------
-- SDL --
type User implements HasName {
  hello: String
  name: String
}

interface HasName {
  name: String
}
-- TypeScript --
import { GraphQLSchema, GraphQLObjectType, GraphQLString, GraphQLInterfaceType } from "graphql";
export function getSchema(): GraphQLSchema {
    const HasNameType: GraphQLInterfaceType = new GraphQLInterfaceType({
        name: "HasName",
        fields() {
            return {
                name: {
                    name: "name",
                    type: GraphQLString
                }
            };
        }
    });
    const UserType: GraphQLObjectType = new GraphQLObjectType({
        name: "User",
        fields() {
            return {
                hello: {
                    name: "hello",
                    type: GraphQLString
                },
                name: {
                    name: "name",
                    type: GraphQLString
                }
            };
        },
        interfaces() {
            return [HasNameType];
        }
    });
    return new GraphQLSchema({
        types: [UserType, HasNameType]
    });
}
