-----------------
INPUT
----------------- 
/** @gqlType */
export default class SomeType {
  /** @gqlField */
  me(): UserResolver {
    return new UserResolver();
  }
  /**
   * @gqlField
   * @deprecated Please use `me` instead.
   */
  viewer(): UserResolver {
    return new UserResolver();
  }
}

/**
 * A user in our kick-ass system!
 * @gqlType User
 */
class UserResolver {
  /** @gqlField */
  name: string = "Alice";

  /** @gqlField */
  greeting(args: { salutation: string }): string {
    return `${args.salutation}, ${this.name}`;
  }
}

/** @gqlField */
export function getUser(_: SomeType): UserResolver {
  return new UserResolver();
}

-----------------
OUTPUT
-----------------
-- SDL --
directive @asyncIterable on FIELD_DEFINITION

directive @propertyName(name: String!) on FIELD_DEFINITION

directive @exported(tsModulePath: String!, functionName: String!, argCount: Int!) on FIELD_DEFINITION

type SomeType {
  me: User
  viewer: User @deprecated(reason: "Please use `me` instead.")
  getUser: User @exported(tsModulePath: "grats/src/tests/fixtures/examples/playground.ts", functionName: "getUser", argCount: 1)
}

"""A user in our kick-ass system!"""
type User {
  name: String
  greeting(salutation: String!): String
}
-- TypeScript --
import { getUser as someTypeGetUserResolver } from "./playground";
import { GraphQLSchema, GraphQLObjectType, GraphQLString, GraphQLNonNull } from "graphql";
const UserType: GraphQLObjectType = new GraphQLObjectType({
    name: "User",
    description: "A user in our kick-ass system!",
    fields() {
        return {
            name: {
                name: "name",
                type: GraphQLString
            },
            greeting: {
                name: "greeting",
                type: GraphQLString,
                args: {
                    salutation: {
                        name: "salutation",
                        type: new GraphQLNonNull(GraphQLString)
                    }
                }
            }
        };
    }
});
const SomeTypeType: GraphQLObjectType = new GraphQLObjectType({
    name: "SomeType",
    fields() {
        return {
            me: {
                name: "me",
                type: UserType
            },
            viewer: {
                deprecationReason: "Please use `me` instead.",
                name: "viewer",
                type: UserType
            },
            getUser: {
                name: "getUser",
                type: UserType,
                resolve(source) {
                    return someTypeGetUserResolver(source);
                }
            }
        };
    }
});
const schema = new GraphQLSchema({
    types: [SomeTypeType, UserType]
});
export { schema };
