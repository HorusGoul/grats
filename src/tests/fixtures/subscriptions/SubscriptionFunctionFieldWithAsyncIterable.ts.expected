-----------------
INPUT
----------------- 
/** @gqlType */
export type Subscription = unknown;

/** @gqlField */
export async function* greetings(_: Subscription): AsyncIterable<string> {
  yield "Hello";
  yield "World";
}

-----------------
OUTPUT
-----------------
-- SDL --
schema {
  subscription: Subscription
}

type Subscription {
  greetings: String @exported(tsModulePath: "grats/src/tests/fixtures/subscriptions/SubscriptionFunctionFieldWithAsyncIterable.ts", functionName: "greetings", argCount: 1) @asyncIterable
}
-- TypeScript --
import { greetings as subscriptionGreetingsResolver } from "./SubscriptionFunctionFieldWithAsyncIterable";
import { GraphQLSchema, GraphQLObjectType, GraphQLString } from "graphql";
function getSchema(): GraphQLSchema {
    const SubscriptionType: GraphQLObjectType = new GraphQLObjectType({
        name: "Subscription",
        fields() {
            return {
                greetings: {
                    name: "greetings",
                    type: GraphQLString,
                    subscribe(source) {
                        return subscriptionGreetingsResolver(source);
                    },
                    resolve(payload) {
                        return payload;
                    }
                }
            };
        }
    });
    return new GraphQLSchema({
        subscription: SubscriptionType,
        types: [SubscriptionType]
    });
}
export { getSchema };
