-----------------
INPUT
----------------- 
/** @gqlType */
export type Subscription = unknown;

/** @gqlField */
export async function* greetings(_: Subscription): AsyncIterable<string> {
  yield "Hello";
  yield "World";
}

-----------------
OUTPUT
-----------------
-- SDL --
schema {
  subscription: Subscription
}

directive @asyncIterable on FIELD_DEFINITION

directive @propertyName(name: String!) on FIELD_DEFINITION

directive @exported(tsModulePath: String!, functionName: String!, argCount: Int!) on FIELD_DEFINITION

type Subscription {
  greetings: String @exported(tsModulePath: "grats/src/tests/fixtures/subscriptions/SubscriptionFunctionFieldWithAsyncIterable.ts", functionName: "greetings", argCount: 1) @asyncIterable
}
-- TypeScript --
import { greetings as subscriptionGreetingsResolver } from "./SubscriptionFunctionFieldWithAsyncIterable";
import { GraphQLSchema, GraphQLObjectType, GraphQLString } from "graphql";
const SubscriptionType: GraphQLObjectType = new GraphQLObjectType({
    name: "Subscription",
    fields() {
        return {
            greetings: {
                name: "greetings",
                type: GraphQLString,
                subscribe(source) {
                    return subscriptionGreetingsResolver(source);
                },
                resolve(payload) {
                    return payload;
                }
            }
        };
    }
});
const schema = new GraphQLSchema({
    subscription: SubscriptionType,
    types: [SubscriptionType]
});
export { schema };
