-----------------
INPUT
----------------- 
/** @gqlType */
class SomeType {
  /** @gqlField */
  hello: string;
}

/**
 * Use this for URLs.
 * @gqlScalar
 */
export type MyUrl = string;

-----------------
OUTPUT
-----------------
-- SDL --
directive @asyncIterable on FIELD_DEFINITION

directive @propertyName(name: String!) on FIELD_DEFINITION

directive @exported(tsModulePath: String!, functionName: String!, argCount: Int!) on FIELD_DEFINITION

directive @exportedScalar(tsModulePath: String!, exportName: String!) on SCALAR

type SomeType {
  hello: String
}

"""Use this for URLs."""
scalar MyUrl @exportedScalar(tsModulePath: "grats/src/tests/fixtures/custom_scalars/DefineCustomScalarWithDescription.ts", exportName: "MyUrl")
-- TypeScript --
import { GraphQLSchema, GraphQLObjectType, GraphQLString, GraphQLScalarType } from "graphql";
function getSchema(): GraphQLSchema {
    const SomeTypeType: GraphQLObjectType = new GraphQLObjectType({
        name: "SomeType",
        fields() {
            return {
                hello: {
                    name: "hello",
                    type: GraphQLString
                }
            };
        }
    });
    const MyUrlType: GraphQLScalarType = new GraphQLScalarType({
        description: "Use this for URLs.",
        name: "MyUrl"
    });
    return new GraphQLSchema({
        types: [SomeTypeType, MyUrlType]
    });
}
export { getSchema };
