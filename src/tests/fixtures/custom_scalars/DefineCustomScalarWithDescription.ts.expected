-----------------
INPUT
----------------- 
/** @gqlType */
class SomeType {
  /** @gqlField */
  hello: string;
}

/**
 * Use this for URLs.
 * @gqlScalar
 */
type MyUrl = string;

-----------------
OUTPUT
-----------------
-- SDL --
type SomeType {
  hello: String
}

"""Use this for URLs."""
scalar MyUrl
-- TypeScript --
import { GraphQLScalarSerializer, GraphQLScalarValueParser, GraphQLScalarLiteralParser, GraphQLSchema, GraphQLObjectType, GraphQLString, GraphQLScalarType } from "graphql";
type ScalarConfigType<TInternal, TExternal> = {
    serialize: GraphQLScalarSerializer<TExternal>;
    parseValue: GraphQLScalarValueParser<TInternal>;
    parseLiteral: GraphQLScalarLiteralParser<TInternal>;
};
export type SchemaConfigType = {
    scalars: {
        MyUrl: ScalarConfigType;
    };
};
export function getSchema(config: SchemaConfigType): GraphQLSchema {
    const SomeTypeType: GraphQLObjectType = new GraphQLObjectType({
        name: "SomeType",
        fields() {
            return {
                hello: {
                    name: "hello",
                    type: GraphQLString
                }
            };
        }
    });
    const MyUrlType: GraphQLScalarType = new GraphQLScalarType({
        description: "Use this for URLs.",
        name: "MyUrl",
        serialize: config.scalars.MyUrl.serialize,
        parseValue: config.scalars.MyUrl.parseValue,
        parseLiteral: config.scalars.MyUrl.parseLiteral
    });
    return new GraphQLSchema({
        types: [SomeTypeType, MyUrlType]
    });
}
