-----------------
INPUT
----------------- 
/** @gqlType */
class SomeType {
  /** @gqlField */
  hello: string;
}

/** @gqlScalar CustomName */
export type MyUrl = string;

-----------------
OUTPUT
-----------------
-- SDL --
directive @asyncIterable on FIELD_DEFINITION

directive @propertyName(name: String!) on FIELD_DEFINITION

directive @exported(tsModulePath: String!, functionName: String!, argCount: Int!) on FIELD_DEFINITION

directive @exportedScalar(tsModulePath: String!, exportName: String!) on SCALAR

type SomeType {
  hello: String
}

scalar CustomName @exportedScalar(tsModulePath: "grats/src/tests/fixtures/custom_scalars/DefineRenamedCustomScalar.ts", exportName: "MyUrl")
-- TypeScript --
import { MyUrl as CustomNameScalarType } from "./DefineRenamedCustomScalar";
import { GraphQLScalarSerializer, GraphQLScalarValueParser, GraphQLScalarLiteralParser, GraphQLSchema, GraphQLObjectType, GraphQLString, GraphQLScalarType } from "graphql";
type SchemaConfig = {
    scalars: {
        CustomName: {
            serialize: GraphQLScalarSerializer<CustomNameScalarType>;
            parseValue: GraphQLScalarValueParser<CustomNameScalarType>;
            parseLiteral: GraphQLScalarLiteralParser<CustomNameScalarType>;
        };
    };
};
function getSchema(config: SchemaConfig): GraphQLSchema {
    const SomeTypeType: GraphQLObjectType = new GraphQLObjectType({
        name: "SomeType",
        fields() {
            return {
                hello: {
                    name: "hello",
                    type: GraphQLString
                }
            };
        }
    });
    const CustomNameType: GraphQLScalarType = new GraphQLScalarType({
        serialize: config.scalars.CustomName.serialize,
        parseValue: config.scalars.CustomName.parseValue,
        parseLiteral: config.scalars.CustomName.parseLiteral,
        name: "CustomName"
    });
    return new GraphQLSchema({
        types: [SomeTypeType, CustomNameType]
    });
}
export { getSchema };
