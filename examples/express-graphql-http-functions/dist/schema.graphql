# Schema generated by Grats (https://grats.capt.dev)
# Do not manually edit. Regenerate by running `npx grats`.
# @generated
schema {
  query: Query
  mutation: Mutation
}

directive @asyncIterable on FIELD_DEFINITION

directive @exported(argCount: Int!, functionName: String!, jsModulePath: String!, tsModulePath: String!) on FIELD_DEFINITION

directive @methodName(name: String!) on FIELD_DEFINITION

type Group {
  id: String!
  members: [User!]!
  name: String!
}

interface IPerson {
  name: String!
}

type Mutation {
  addUser(userData: UserDataInput!): User! @exported(jsModulePath: "examples/express-graphql-http-functions/dist/Schema.js", tsModulePath: "examples/express-graphql-http-functions/Schema.ts", functionName: "addUser", argCount: 3)
  removeUser(id: String!): String! @exported(jsModulePath: "examples/express-graphql-http-functions/dist/Schema.js", tsModulePath: "examples/express-graphql-http-functions/Schema.ts", functionName: "removeUser", argCount: 3)
  updateUser(id: String!, userData: UserDataInput!): User! @exported(jsModulePath: "examples/express-graphql-http-functions/dist/Schema.js", tsModulePath: "examples/express-graphql-http-functions/Schema.ts", functionName: "updateUser", argCount: 3)
}

type Query {
  allUsers: [User!]! @exported(jsModulePath: "examples/express-graphql-http-functions/dist/Schema.js", tsModulePath: "examples/express-graphql-http-functions/Schema.ts", functionName: "allUsers", argCount: 3)
  me: User! @exported(jsModulePath: "examples/express-graphql-http-functions/dist/Schema.js", tsModulePath: "examples/express-graphql-http-functions/Schema.ts", functionName: "me", argCount: 3)
  person: IPerson! @exported(jsModulePath: "examples/express-graphql-http-functions/dist/Schema.js", tsModulePath: "examples/express-graphql-http-functions/Schema.ts", functionName: "person", argCount: 3)
  userById(id: String!): User! @exported(jsModulePath: "examples/express-graphql-http-functions/dist/Schema.js", tsModulePath: "examples/express-graphql-http-functions/Schema.ts", functionName: "userById", argCount: 3)
}

type User implements IPerson {
  groups: [Group!]!
  id: String!
  name: String!
}

input UserDataInput {
  groupIDs: [String!]
  name: String!
}